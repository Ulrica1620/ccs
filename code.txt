
'''
st.subheader('🎵 音乐作品')
st.markdown(
    """
    In this module, we will go through some basic ideas of a powerful modelL: *[DeepFloyd](https://github.com/deep-floyd/IF)*
    \n
    Starting with the structure of DeepFloyd, we also add comments about the model's most important features. Moreover, we also pointed out several noticeable caveats.
    \n
    """
)
st.markdown("\n")
st.markdown('\n')
st.markdown('\n')

st.subheader('🏆 个人奖项')
st.markdown(
    """
    In this module, we will show the images generated by DeepFloyd. It performs well on the task of generating human faces, image with texts, and etc.
    \n
    Here we provide an example where you can play with different prompts, and we are working on getting DeepFloyd running in backend.
    \n
    We also can let you select different image styles for transfering purposes.
    """
)
st.markdown("\n")
st.markdown('\n')
st.markdown('\n')
st.subheader('🎉 音综战绩')
st.markdown(
    """
    In this module, we finished a simple trial of inserting visible watermark into the picture. 
    \n
    It is the watermark that we always encounter, visible and need some effort to remove. However, this visible watermark is not irreversible, which means it is not rubust enough.
    \n
    Here we provide a trial. You can upload your own image, and the watermark you choose. And then, you also can adjust the parameter *Alpha* to choose the visibility of your watermark. If ALpha is zero, there's no watermark in the picture.
    """
)
st.markdown("\n")
st.markdown('\n')
st.markdown('\n')
st.subheader('😓 破除洗脑包')
st.markdown(
    """
    This is the main module for our project. You can insert your own watermark into a customed image.
    \n
    This watermark is invisible to everyone, and really hard to remove.
    \n
    We also wanted to test the robustness of the watermark tools, and we conducted the following tests:
    - Cut
    - Scale
    - Cut + Scale
    - Rotate
    - Block
    - Salt & Pepper Noise
    - Adjust Brightness
    - Warp
    - Color Rotation
    - Fourier Attack
    \n
    Here in this module, we provide several trials for you:
    - You can see the outcome of our invisible watermark tool
    - You can attack the watermarked image by clicking your mouse
    - You can test the robustness of the watermark
    - You can try several reverse functions, aiming to extract better watermark after the image being "ruined" by strong attacks
    """
)
st.markdown("\n")
st.markdown('\n')
st.markdown('\n')
st.subheader('🍐 里里往事')
st.markdown(
    """
    - Get DeepFloyd IF running in backend
    - Polish the blog
    - Testing and debugging
    """
)
st.markdown("\n")
st.markdown('\n')
st.markdown('\n')

st.subheader('🦈 新粉指南')
st.markdown(
    """
    - Get DeepFloyd IF running in backend
    - Polish the blog
    - Testing and debugging
    """
)
st.markdown("\n")
st.markdown('\n')
st.markdown('\n')

st.subheader('🥰 资源分享')
st.markdown(
    """
    - Get DeepFloyd IF running in backend
    - Polish the blog
    - Testing and debugging
    """
)
st.markdown("\n")
st.markdown('\n')
st.markdown('\n')
'''



# Comments part

conn = connect()
comments = collect(conn)

with st.expander("💬 Open comments"):

    # Show comments

    st.write("**Comments:**")

    for index, entry in enumerate(comments.itertuples()):
        st.markdown(COMMENT_TEMPLATE_MD.format(entry.name, entry.date, entry.comment))

        is_last = index == len(comments) - 1
        is_new = "just_posted" in st.session_state and is_last
        if is_new:
            st.success("☝️ Your comment was successfully posted.")

    st.markdown("\n")
    st.markdown('\n')
    st.markdown('\n')

    # Insert comment

    st.write("**Add your own comment:**")
    form = st.form("comment")
    name = form.text_input("Name")
    comment = form.text_area("Comment")
    submit = form.form_submit_button("Add comment")

    if submit:
        date = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        insert(conn, [[name, comment, date]])
        if "just_posted" not in st.session_state:
            st.session_state["just_posted"] = True
        st.experimental_rerun()